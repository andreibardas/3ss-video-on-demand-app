{"version":3,"file":"static/js/575.a0191669.chunk.js","mappings":"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","sources":["pages/MoviesByCategory.tsx","hooks/useGetMoviesByCategory.tsx"],"sourcesContent":["import React, { useState, useRef, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ApiResponse, useGetApi } from \"../hooks/useGetApiHook\";\nimport { useGetMoviesByCategory } from \"../hooks/useGetMoviesByCategory\";\nimport { Link } from \"react-router-dom\";\n\ntype Category = {\n  id: number;\n  name: string;\n};\n\nconst MoviesByCategory = () => {\n  let { category_id } = useParams();\n\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const { hasMore, loading, error, data }: any = useGetMoviesByCategory(\n    category_id,\n    pageNumber\n  );\n\n  const observer = useRef<any>();\n\n  const lastMovieElementRef = useCallback<any>(\n    (node: any) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        console.log(\"visible\");\n        if (entries[0].isIntersecting) {\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\n        }\n      });\n      if (node) observer.current.observe(node);\n      console.log(node);\n    },\n    [loading, hasMore]\n  );\n\n  const categories: ApiResponse = useGetApi(\n    \"https://video-proxy.3rdy.tv/api/vod/category\"\n  );\n\n  const currentCategory = categories.data?.data.genres.find(\n    (item: Category) => {\n      return item.id.toString() === category_id ? item?.name : null;\n    }\n  );\n\n  return (\n    <div>\n      <h1>Movies By Category Page</h1>\n      <p>{currentCategory?.name} Movies</p>\n\n      <button onClick={() => console.log(data)}>\n        console log movies by category\n      </button>\n\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        {data.map((asset: any, index: any) => {\n          if (data.length === index + 1) {\n            return (\n              <Link key={asset.id} to={`/asset/${asset.id}`}>\n                <div ref={lastMovieElementRef}>\n                  <img\n                    style={{ width: \"200px\" }}\n                    src={`https://www.themoviedb.org/t/p/w220_and_h330_face/${asset.poster_path}`}\n                  />\n                  <p>{asset.original_title}</p>\n                </div>\n              </Link>\n            );\n          } else {\n            return (\n              <Link key={asset.id} to={`/asset/${asset.id}`}>\n                <div>\n                  <img\n                    style={{ width: \"200px\" }}\n                    src={`https://www.themoviedb.org/t/p/w220_and_h330_face/${asset.poster_path}`}\n                  />\n                  <p>{asset.original_title}</p>\n                </div>\n              </Link>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesByCategory;\n","import { useState, useEffect } from \"react\";\n\nexport type CategoriesApiResponse = {\n  status: Number;\n  statusText: String;\n  data: any;\n  error: any;\n  loading: Boolean;\n  hasMore: Boolean;\n};\n\nexport const useGetMoviesByCategory = (\n  categoryId: any,\n  pageNumber: any\n): CategoriesApiResponse => {\n  const [status, setStatus] = useState<Number>(0);\n  const [statusText, setStatusText] = useState<String>(\"\");\n  const [data, setData] = useState<any>([]);\n  const [error, setError] = useState<any>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [hasMore, setHasMore] = useState(false);\n\n  const getAPIData = async () => {\n    setLoading(true);\n    try {\n      const apiResponse = await fetch(\n        `https://video-proxy.3rdy.tv/api/vod/category/${categoryId}/assets/?page=${pageNumber}&size=20`\n      );\n      const json = await apiResponse.json();\n      setStatus(apiResponse.status);\n      setStatusText(apiResponse.statusText);\n      setData((prevData: any) => {\n        if (pageNumber === 1) {\n          return json.data.results;\n        } else {\n          return [...new Set([...prevData, ...json.data.results])];\n        }\n      });\n      setHasMore(json.data.total_results > 0);\n    } catch (error) {\n      setError(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getAPIData();\n  }, [categoryId, pageNumber]);\n\n  return { status, statusText, data, error, loading, hasMore };\n};\n"],"names":["category_id","useParams","useState","pageNumber","setPageNumber","categoryId","status","setStatus","statusText","setStatusText","data","setData","error","setError","loading","setLoading","hasMore","setHasMore","getAPIData","fetch","apiResponse","json","prevData","results","Set","total_results","useEffect","useGetMoviesByCategory","observer","useRef","lastMovieElementRef","useCallback","node","current","disconnect","IntersectionObserver","entries","console","log","isIntersecting","prevPageNumber","observe","currentCategory","useGetApi","genres","find","item","id","toString","name","onClick","style","display","flexDirection","justifyContent","alignItems","flexWrap","map","asset","index","length","to","ref","width","src","poster_path","original_title"],"sourceRoot":""}